# This class, which is made by me, allows us to save our grades for entered subjects, \
# and we can also calculate the average grade for the subject we want
class School:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.subject_grade = {}
        
    def show(self):
        print(f"Name, Surname: {self.name} {self.surname}")
        
    def sub_grade(self, sub, grade):
        self.subject = sub
        self.grade = grade
        if not sub in self.subject_grade:
            self.subject_grade[self.subject] = [self.grade]
        else:
            self.subject_grade[self.subject].append(self.grade)
            
        return self.subject_grade
    
    def average(self, subject):
        self.sub = subject
        if self.sub in self.subject_grade:
            a = sum(self.subject_grade[self.sub]) / len(self.subject_grade[self.sub])
            return f"Average ({self.sub}): {a}"
        else:
            return 'There is no such subject'

# run the program
s1 = School('Kate', 'Brown')
name = s1.show()
s1.sub_grade('math', 19)
s1.sub_grade('math', 20)
print(s1.sub_grade('english', 19))
print('s1 -> ', s1.average('math'))

print() # just a seperator
s2 = School('Ann', 'Johnson')
name2 = s2.show()
s2.sub_grade('history', 20)
s2.sub_grade('geometry', 19)
s2.sub_grade('history', 19)
print(s2.sub_grade('history', 18))
print('s2 -> ', s2.average('history'))

print("\n" + 'ChatGPT exercises' + '\n') # just a seperator
# Exercises generated by chatGPT
# N1
class Dog:
    def __init__(self, name, age, breed):
        self.name = name
        self.age = age
        self.breed = breed
    
    def show_info(self):
        print(f"Name: {self.name}, Age: {self.age}, Breed: {self.breed}")
        
    def bark(self):
        print(f"{self.name} is barking")
        
d1 = Dog('Bubble', 12, 'husky')
d1.bark()
d1.show_info()

print() # just a seperator
# N2 Using Inheritance
class Vehicle:
    def __init__(self, make, model, year):
        self.make = make
        self.model = model
        self.year = year
        
    def Vehicle_info(self):
        print(f"Vehicle information -> Make: {self.make}, Model: {self.model}, Year: {self.year}")

    def is_vintage(self, current_year):
        self.current_year = current_year
        if (self.current_year - self.year) > 25:
            return f"Is vintage?: {True}"
        return f"Is vintage?: {False}"


class Car(Vehicle):
    def __init__(self, make, model, year, mass, mileage):
        super().__init__(make, model, year)
        self.mileage = mileage
        self.mass = mass
        
    def drive(self, miles):
        self.miles = miles
        self.mileage += self.miles
        
    def get_info(self):
        print(f"CAR INFO - Make: {self.make}, Model: {self.model}, \nYear: {self.year}, Mass: {self.mass} tones, Mileage: {self.mileage} miles")

#running
car = Car('Tesla', 'Model X', 2020, 5, 105000)
car.drive(500)
car.get_info()
print(car.is_vintage(2024))

print() # just a seperator
truck = Vehicle('Mack', 'Model R', 1995)
truck.Vehicle_info()
print(truck.is_vintage(2024))
